<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>记录electron-vue打包</title>
      <link href="/vue/electron-vue/"/>
      <url>/vue/electron-vue/</url>
      <content type="html"><![CDATA[<h1 id="electron-vue打包成客户端"><a href="#electron-vue打包成客户端" class="headerlink" title="electron-vue打包成客户端"></a>electron-vue打包成客户端</h1><p>  工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。<br><a id="more"></a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>需要管理员权限的powershell,外加翻墙,否则很多下载都不成功,关掉杀毒软件</p><ul><li>安装node,vue-cli</li><li>安装windows-build-tools<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure></li></ul><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p>在项目初始化过程中会让选择electron-builder或者electron-packager,这是electron打包的两种方式。下面我们会分别介绍两种方式异同。</p><blockquote><p>再生成的项目中\src下有main和renderer,其中main为主进程,配置菜单界面大小等,renderer为渲染进程,页面组件在这里配置</p></blockquote><p>结构图如下：</p><p>无论是选择的packager,还是builder,在生成项目之后,都要执行以下操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h3 id="electron-builder打包过程"><a href="#electron-builder打包过程" class="headerlink" title="electron-builder打包过程"></a>electron-builder打包过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行该命令后会下载打包所需要的依赖文件,例如electron-vX.X.X-win32-x64.zip,但通常会出现下载失败,我们可以手动下载,放到指定的目录下。</p><blockquote><p>解决办法就是根据控制台显示的错误信息,到npm去搜索该文件,下载下来。通常放在C:\Users\Administrator\AppData\Local\electron\Cache</p></blockquote><p>解决了出现的问题之后继续执行npm run build,如果继续出现错误,仍然按照上述办法解决。<br>另外有两个必装的依赖:winCodeSign和nsis</p><blockquote><p><a href="https://github.com/electron-userland/electron-builder-binaries/releases" target="_blank" rel="noopener">wincodesin包地址</a><br><a href="https://github.com/electron-userland/electron-builder-binaries/releases/tag/nsis-resources-3.0.0" target="_blank" rel="noopener">nsis包地址</a></p></blockquote><p>将下载的依赖解压到C:\Users\Administrator\AppData\Local\electron\Cache</p><p>之后就可以顺利打包了</p><h3 id="electron-packer打包过程"><a href="#electron-packer打包过程" class="headerlink" title="electron-packer打包过程"></a>electron-packer打包过程</h3><p>使用packager打包只能生成可执行版,通过下面指令生成相对的客户端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run build:win32</span><br><span class="line">npm run build:darwin</span><br><span class="line">npm run build:linux</span><br><span class="line">npm run build:mas</span><br></pre></td></tr></table></figure></p><p><img src="/vue/electron-vue/结构图.png" alt="结构图"></p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
