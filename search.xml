<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js之对象属性]]></title>
    <url>%2Fjs%E9%9A%BE%E7%82%B9%2Fjs%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[本文旨在理清js对象属性里相关难点，主要包括:[[Get]]/[[Set]]、get/set、getter/setter几个概念的阐述，数据属性和访问器属性。 属性属性是存储在特定命名位置的值，是对象的内容，属性并不直接存储在对象容器内部。属性有两种类型:数据属性和访问器属性。属性具备了属性描述符，用来描述属性拥有的特性。 数据属性数据属性包含一个数据值的位置。在这个位置可以读取和写入值。共有四个描述其行为的特征: [[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true [[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true [[Writable]]：可写，表示能否修改属性值。默认true [[Value]]：属性的数据值。读写属性值从该位置。默认undefined访问器属性访问器属性不包含数据值；它们包含一对getter和setter函数。有以下4个特性： [[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true [[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true [[Get]]：在读取属性时调用的函数。默认undefined [[Set]]：在写入属性时调用的函数。默认undefined 访问器属性不能直接定义，必须使用Object.defineProperty()来定义。 要更改属性默认的特性，必须使用Object.defineProperty()方法。这个方法接受三个参数：属性所在的对象、属性的名字和属性描述符对象。其中描述符对象的属性必须是：configurable、enumerable、writable和value。 属性描述符描述的时属性的特点 好比 a 设置它的可读可写性]]></content>
      <categories>
        <category>js难点</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js之原型]]></title>
    <url>%2Farticle%2Fjs%E4%B9%8B%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[js之闭包]]></title>
    <url>%2F%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%2Fjs%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"></content>
      <categories>
        <category>你不知道的JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录electron-vue打包]]></title>
    <url>%2Fvue%2Felectron-vue%2F</url>
    <content type="text"><![CDATA[本文记录了使用electron-vue对vue项目进行打包的处理办法。工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。 ##环境配置需要管理员权限的powershell,外加翻墙,否则很多下载都不成功,关掉杀毒软件 安装node,vue-cli 安装windows-build-tools1npm install --global --production windows-build-tools 构建项目1vue init simulatedgreg/electron-vue my-project 在项目初始化过程中会让选择electron-builder或者electron-packager,这是electron打包的两种方式。下面我们会分别介绍两种方式异同。 再生成的项目中\src下有main和renderer,其中main为主进程,配置菜单界面大小等,renderer为渲染进程,页面组件在这里配置 结构图如下：无论是选择的packager,还是builder,在生成项目之后,都要执行以下操作:123cd projectnpm installnpm run dev electron-builder打包过程1npm run build 执行该命令后会下载打包所需要的依赖文件,例如electron-vX.X.X-win32-x64.zip,但通常会出现下载失败,我们可以手动下载,放到指定的目录下。 解决办法就是根据控制台显示的错误信息,到npm去搜索该文件,下载下来。通常放在C:\Users\Administrator\AppData\Local\electron\Cache 解决了出现的问题之后继续执行npm run build,如果继续出现错误,仍然按照上述办法解决。另外有两个必装的依赖:winCodeSign和nsis wincodesin包地址nsis包地址 将下载的依赖解压到C:\Users\Administrator\AppData\Local\electron\Cache 之后就可以顺利打包了 electron-packer打包过程使用packager打包只能生成可执行版,通过下面指令生成相对的客户端。1234npm run build:win32npm run build:darwinnpm run build:linuxnpm run build:mas]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
</search>
