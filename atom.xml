<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>齐云札记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenshaotang.com/"/>
  <updated>2019-01-11T05:38:24.817Z</updated>
  <id>https://chenshaotang.com/</id>
  
  <author>
    <name>陈少棠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js之对象属性</title>
    <link href="https://chenshaotang.com/js%E9%9A%BE%E7%82%B9/js%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
    <id>https://chenshaotang.com/js难点/js之对象属性/</id>
    <published>2019-01-10T15:47:32.000Z</published>
    <updated>2019-01-11T05:38:24.817Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在理清js对象属性里相关难点，主要包括:[[Get]]/[[Set]]、get/set、getter/setter几个概念的阐述，数据属性和访问器属性。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性是存储在特定命名位置的值，是对象的内容，属性并不直接存储在对象容器内部。属性有两种类型:数据属性和访问器属性。属性具备了属性描述符，用来描述属性拥有的特性。</p><h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。共有四个描述其行为的特征:</p><ul><li>[[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true</li><li>[[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true</li><li>[[Writable]]：可写，表示能否修改属性值。默认true</li><li>[[Value]]：属性的数据值。读写属性值从该位置。默认undefined<h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2>访问器属性不包含数据值；它们包含一对getter和setter函数。有以下4个特性：</li><li>[[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true</li><li>[[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true</li><li>[[Get]]：在读取属性时调用的函数。默认undefined</li><li>[[Set]]：在写入属性时调用的函数。默认undefined<blockquote><p>访问器属性不能直接定义，必须使用Object.defineProperty()来定义。</p></blockquote></li></ul><p>要更改属性默认的特性，必须使用Object.defineProperty()方法。这个方法接受三个参数：属性所在的对象、属性的名字和<strong>属性描述符对象</strong>。其中描述符对象的属性必须是：configurable、enumerable、writable和value。</p><p>属性描述符描述的时属性的特点  好比 a 设置它的可读可写性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文旨在理清js对象属性里相关难点，主要包括:[[Get]]/[[Set]]、get/set、getter/setter几个概念的阐述，数据属性和访问器属性。&lt;/p&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属
      
    
    </summary>
    
      <category term="js难点" scheme="https://chenshaotang.com/categories/js%E9%9A%BE%E7%82%B9/"/>
    
    
      <category term="js" scheme="https://chenshaotang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js之原型</title>
    <link href="https://chenshaotang.com/article/js%E4%B9%8B%E5%8E%9F%E5%9E%8B/"/>
    <id>https://chenshaotang.com/article/js之原型/</id>
    <published>2019-01-10T05:13:16.000Z</published>
    <updated>2019-01-10T05:13:16.722Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js之闭包</title>
    <link href="https://chenshaotang.com/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/js%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>https://chenshaotang.com/你不知道的JavaScript/js之作用域和闭包/</id>
    <published>2019-01-10T05:11:36.000Z</published>
    <updated>2019-01-10T05:53:20.213Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="你不知道的JavaScript" scheme="https://chenshaotang.com/categories/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/"/>
    
    
      <category term="js" scheme="https://chenshaotang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>记录electron-vue打包</title>
    <link href="https://chenshaotang.com/vue/electron-vue/"/>
    <id>https://chenshaotang.com/vue/electron-vue/</id>
    <published>2018-12-29T06:06:53.000Z</published>
    <updated>2019-01-11T01:40:24.242Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了使用electron-vue对vue项目进行打包的处理办法。工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。<br><a id="more"></a></p><p>##环境配置<br>需要管理员权限的powershell,外加翻墙,否则很多下载都不成功,关掉杀毒软件</p><ul><li>安装node,vue-cli</li><li>安装windows-build-tools<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure></li></ul><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p>在项目初始化过程中会让选择electron-builder或者electron-packager,这是electron打包的两种方式。下面我们会分别介绍两种方式异同。</p><blockquote><p>再生成的项目中\src下有main和renderer,其中main为主进程,配置菜单界面大小等,renderer为渲染进程,页面组件在这里配置</p></blockquote><p>结构图如下：<br><img src="/vue/electron-vue/jie.jpg" alt=""><br>无论是选择的packager,还是builder,在生成项目之后,都要执行以下操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h2 id="electron-builder打包过程"><a href="#electron-builder打包过程" class="headerlink" title="electron-builder打包过程"></a>electron-builder打包过程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行该命令后会下载打包所需要的依赖文件,例如electron-vX.X.X-win32-x64.zip,但通常会出现下载失败,我们可以手动下载,放到指定的目录下。</p><blockquote><p>解决办法就是根据控制台显示的错误信息,到npm去搜索该文件,下载下来。通常放在C:\Users\Administrator\AppData\Local\electron\Cache</p></blockquote><p>解决了出现的问题之后继续执行npm run build,如果继续出现错误,仍然按照上述办法解决。<br>另外有两个必装的依赖:winCodeSign和nsis</p><blockquote><p><a href="https://github.com/electron-userland/electron-builder-binaries/releases" target="_blank" rel="noopener">wincodesin包地址</a><br><a href="https://github.com/electron-userland/electron-builder-binaries/releases/tag/nsis-resources-3.0.0" target="_blank" rel="noopener">nsis包地址</a></p></blockquote><p>将下载的依赖解压到C:\Users\Administrator\AppData\Local\electron\Cache</p><p>之后就可以顺利打包了</p><h2 id="electron-packer打包过程"><a href="#electron-packer打包过程" class="headerlink" title="electron-packer打包过程"></a>electron-packer打包过程</h2><p>使用packager打包只能生成可执行版,通过下面指令生成相对的客户端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run build:win32</span><br><span class="line">npm run build:darwin</span><br><span class="line">npm run build:linux</span><br><span class="line">npm run build:mas</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录了使用electron-vue对vue项目进行打包的处理办法。工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://chenshaotang.com/categories/vue/"/>
    
    
      <category term="electron" scheme="https://chenshaotang.com/tags/electron/"/>
    
  </entry>
  
</feed>
