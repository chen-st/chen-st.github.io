<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>齐云札记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenshaotang.com/"/>
  <updated>2019-01-18T12:01:46.526Z</updated>
  <id>https://chenshaotang.com/</id>
  
  <author>
    <name>陈少棠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js修仙之一界本源</title>
    <link href="https://chenshaotang.com/js%E4%BF%AE%E4%BB%99/js%E4%BF%AE%E4%BB%99%E4%B9%8B%E4%B8%80%E7%95%8C%E6%9C%AC%E6%BA%90/"/>
    <id>https://chenshaotang.com/js修仙/js修仙之一界本源/</id>
    <published>2019-01-16T07:00:42.000Z</published>
    <updated>2019-01-18T12:01:46.526Z</updated>
    
    <content type="html"><![CDATA[<p>自计算机宇宙诞生以来，有很多大神通者在这里开天辟地，开创了很多界，有C、C++、Java等世界，它们彼此相连，其中有一处叫做JavaScript的世界，自被开辟以来吸引了很多修行者来此修炼。JS界由ES、DOM、BOM组成。<br><a id="more"></a><br>话说这一日，齐云道长慕名来到JS界，刚入此界，便被界中三座大山吸引，分别名曰：作用域闭包、原型链继承、异步。相传此三山中藏着js界的创世本源。道长便在此闭关，静心感悟。</p><p>时间一晃就是数月，齐云早已把js界基本情况了解了，不过至于三座大山里隐藏的谜团却迟迟没有头绪。苦闷之中，坐在山上看日出日落，观星辰变化。斗转星移之间，齐云感慨万物变化奇妙，口中念起了老君的《道德经》：道生一，一生二，二生三，三生万物，万物负阴而抱阳。却突然露出了笑容：“怎么没早点想到呢，道衍万物。就是在主宇宙也是生于大道，更何况在这js世界呢”。</p><p>相传当年布兰登十天造此界，应该也是按照这个思路来的。万物都从无产生，此界也是无中生有，0和1是计算机宇宙中的阴阳，界中万物都是由此衍化。再定下八卦五行，此界便可运转繁衍不息。以往大部分人都是从基本的语法开始感悟，今天我从null开始推演。</p><p>了解宇宙本源之后，齐云此时心中有了明悟，仿佛看到了这个世界被创造和不断完善的样子。</p><blockquote><p>虽然js经过几次的升级，拥有更强大的功能，不过最初js只是用来做简单的数据验证。。后来在ECMA-262中定义了ES，才提供了核心语言功能。</p></blockquote><p>开天辟地是第一步，这个天地就叫引擎。最早只有创始人布兰登在网景时开辟的SpiderMonkey，之后诸神又开辟了几处不同的天地，JScript(IE6,IE7, IE8)、Chakra(IE9,IE10, IE11, IE Edge)、SpiderMonkey(Firefox)、JavaScriptCore(Safari)、V8(Chrome)。不同空间的环境略有不同，但js子民大多可以在这几处天地下都能生存，只不过生活节奏工作效率不一样（引擎性能不同）。更有平行天地Node等。天地既有了，便可以创造万物以及定下此界的规则。万物由代码组成，我们不可能一下子把万物都生成，只需要创造出最基本的元素和种类，之后让他们衍生万物。</p><p><strong>组成代码的五行：变量、操作符、控制语句、对象、函数。</strong><br>变量：不给强制规定类型，可以说是世界最平等的事了，不管你本身什么类型，它都平等对待你，不过麻烦倒也很多。。<br>函数：创造了不少默认的行为规则，toString()、get()、set()就好像人会吃饭睡觉的行为一样，被规定的。</p><blockquote><p>这里只是化用五行，仅仅代表最基本的五种元素，并没有相生相克这些。</p></blockquote><p>基本元素有了，怎么利用这些元素组成无数的代码，这些代码又如何丰富世界呢?只有道衍生的规则能办到，就好像四季更迭，花开花落一般。生与死，对与错。<br>规则之一：语法。它规定了区分大小写、标识符、注释、严格模式、操作符、语句、对象的形式、函数定义。<br>规则之二：数据类型和数据类型的转化，好比水变成冰<br>规则之三：作用域，上下文，闭包。它描述变量存储的规律，细看js修仙之作用域闭包一文<br>规则之四：原型链规则。它是JS界本源之一。有著名的this规则<br>规则之五：异步规则。异步操作是为了改善单线程<br>规则之等等：。。。还有很多规则，例如错误处理等。详看ECMAScript标准</p><p><strong>借助八卦，将js中八种事物融合进来，相互配合，组成运转的JS界。</strong><br><strong>乾代表引擎，坤代表回收机制，震代表构造函数，巽代表引用类型，坎代表执行语句，离代表编译器，艮代表异步，兑代表同步。</strong></p><blockquote><p>乾为天，坤为地，离为太阳，坎为月亮，四卦不停准转有了event loop，有了代码生成编译销毁，事件处理，好比四季循环。之后又有了了震雷，雷动生巽风，雷风相薄，构造函数和引用类型互相影响，艮山兑水，同步异步在event loop中在运转。</p></blockquote><p>和其他OO世界一样，JS也是对象的世界。对象拥有着属性和方法。属性就是特征，方法就是行为。有了这些对象就能动起来了，仿佛拥有了生命一样。我们不可能一下子创造出所有的对象，只有先造出第一批对象，它们是JS对象老祖，负责繁衍教化万民。JS世界对象有自己的特点，它们当中有普通对象和函数对象。函数对象地位较高，属于一等公民，它们可以被调用，还修行一种独特的法术，叫做原型之体。原型之体与函数之体通过<strong>prototype和constructor</strong>相连。本体通过prototype可以获取原型之体的能力，原型之体则通过constructor表明自己函数之体的身份。</p><blockquote><p>虽然typeof function a(){}返回的是’function’不是’object’,这是因为函数确实有一些特殊的属性，因此用typeof来区分函数和其他对象是有必要的</p><p>有人说JS中万物皆对象，事实上是错误的，因为(string、boolean、number、number、undefined)本身不是对象，而是基本类型如a=2。</p></blockquote><p>在每个对象中都存在一块印记,叫[[prototype]]，它是对象的血脉之力，有着惊人的作用，当发动血脉之力时，可以发挥先祖之力，甚至可以使出先天对象的法术。有如此大的威力，主要因为对象的[[prototype]]印记连接的是父辈的原型之体！而父辈之体也有属于自己的血脉之力，因此后辈对象中有遇到自己解决不了的问题时，血脉之力会触发，帮助它们渡过难关。</p><p>有一个特殊的对象Object.prototype，它是这个世界所有对象的智慧之祖，所有的对象都继承了它的智慧。另一个重要的对象是Function.prototyp，它拥有了关于函数对象的智慧，并且它也继承了Object.prototype的智慧。这两个对象我称它们为先天对象，是JS根基对象，它们高高在上，是万象之根。而且它们是Object和Function对象的原型之体，神通广大，原型之体术就是它们最先练就。Function掌管着函数对象，Object掌管着原型之体和普通对象。<strong>几乎所有的函数都是引用类型Function的实例，几乎所有的对象都是Object的实例</strong>Function.prototype继承了Object.prototype（虽然会出现覆盖），Object的血脉又连接Function，可以说这两位是其他JS对象共同的老祖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.__prototype === <span class="built_in">Object</span>.prototype</span><br><span class="line"><span class="built_in">Object</span>.__prototype === <span class="built_in">Function</span>.prototype</span><br></pre></td></tr></table></figure><blockquote><p>在某对象中找不到要找的属性时，就会沿着原型链网上找。从ECMAScript6开始，[[Prototype]]可以通过Object.getPrototypeOf()和Object.setPrototypeOf()访问器来访问，这个等同于JS的非标准但许多浏览器实现的属性<strong>proto</strong></p></blockquote><p>全局的Function对象没有自己的属性和方法，继承于Function.prototype，因此Function.prototype是不能被修改的。Function.prototype还有个特殊的身份，它也是个函数，简直是深藏不露。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype)</span><br><span class="line">[<span class="built_in">Function</span>]</span><br></pre></td></tr></table></figure><p>剩下的一些对象组成了长老会，它们分别是Array、Date、RegExp、String、Math、Error等，以及后面加入的Set、Map等几位长老。长老们拥有各自的神通和家族。例如Array长老擅长操作数组，有sort、slice等神通，而Math长老有random神通。不过它们也都是Object和Fucntion的部下。每个长老的函数之体源自Function，继承了Function.prototype的神通。而它们的原型之体继承了Object.prototype的智慧。</p><p><strong>对象是引用类型的实例</strong>，通过new加构造函数可以创造新对象，后来先天对象Object又感悟了Object.create之法，也可以创造新的对象。</p><blockquote><p>事实上，根本没有构造函数，或者人人都是构造函数。当且仅当使用new时，函数调用会变成构造函数调用。</p></blockquote><p>JS界的老祖，长老会及长老会门下关系如下:</p><p><img src="/js修仙/js修仙之一界本源/JS原型链.png" alt="原型链图"></p><p>可以看到两位老祖高高在上，受万众仰视。它们与多位长老一样，函数体通过蓝色箭头prototype指向原型之体。原型之体通过灰色线constructor连接函数之体,后代子孙而血脉之力由[[prototype]]沿着橙色线，找到了父对象（构造函数）的原型之体，父对象或长老们的原型之体的血脉是绿色的线，指向了Object.prototype。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">duke.__proto__ === Sub.prototype</span><br><span class="line">Sub.prototype.__proto__ = == <span class="built_in">Object</span>.prototype</span><br><span class="line">-------------------------------------------------</span><br><span class="line">Sub.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure><p>至此，我们可以这么归纳：<br>1.<strong>所有对象都有隐式原型[[prototype]]，它指向了创造它的构造函数的原型对象，一直连接到Object.prototype,而Object.prototype也有隐式原型，而它指向Null</strong>，当访问一个对象的属性找不到时，会沿原型链向上找，找到了会返回，找不到就会继续向上知道null会返回undefined。</p><p>2.<strong>几乎所有函数都是Function的实例，为了符合这个规则，Function的隐式原型指向的是它的原型对象。</strong></p><p>易是包罗万象，一切事物和现象都可以装进这个模式里，易是变化的，不管代码如何复杂，都是符合最基本的规则，易虽然变化，但大道是永恒的，变化之道是不变的。JS的世界也是这样，不管由多复杂的代码组成的程序，也都得遵循最基本的变量声明语法，也要符合原型的设计模式，也都得按照既定的规则来编写。所以，明白这个JS界的一界本源，才能在这里畅游天地之间。</p><p>本文是陈少棠原创，收录在《齐云札记》，转载请标明原作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自计算机宇宙诞生以来，有很多大神通者在这里开天辟地，开创了很多界，有C、C++、Java等世界，它们彼此相连，其中有一处叫做JavaScript的世界，自被开辟以来吸引了很多修行者来此修炼。JS界由ES、DOM、BOM组成。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="js修仙" scheme="https://chenshaotang.com/categories/js%E4%BF%AE%E4%BB%99/"/>
    
    
      <category term="js" scheme="https://chenshaotang.com/tags/js/"/>
    
      <category term="原型链" scheme="https://chenshaotang.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>js之对象属性</title>
    <link href="https://chenshaotang.com/js%E4%BF%AE%E4%BB%99/js%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
    <id>https://chenshaotang.com/js修仙/js之对象属性/</id>
    <published>2019-01-10T15:47:32.000Z</published>
    <updated>2019-01-18T12:02:01.511Z</updated>
    
    <content type="html"><![CDATA[<p>在js属性描述符这部分有几个较难理解的名词概念，本文旨在描述自己对它们的理解，并收录在《齐云札记》里，主要包括:[[Get]]/[[Put]]、get/set、getter/setter几个概念的阐述，数据属性和访问器属性。<br><a id="more"></a></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>首先我们要搞清楚属性的概念，属性是存储在特定命名位置的值，是对象的内容，属性并不直接存储在对象容器内部。属性有两种类型:数据属性和访问器属性。属性具备了属性描述符，用来描述属性拥有的特性。</p><h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><p>属性描述符用来描述属性特性的(只有在内部才能用的特性),配置属性是否可读，是否可写，是否可枚举，值是多少，读写。</p><p><strong>属性描述符对象</strong><br>Object.definePrOperty(obj,’a’,{value:2,writable:true,configurable:true})第三个参数就是属性描述符对象 ，首先它是个对象，它有自己的属性，其次它是属性a的属性描述符，用来配置属性。</p><p>定义这些特性为了实现JavaScript引擎用的，因此再JavaScript中不能直接访问它们。为了表示特征是内部值，ES规范把它们放在了两对方括号中，例如[[Enumerable]]。</p><blockquote><p>访问器属性不能直接定义，必须使用Object.defineProperty()来定义。</p></blockquote><h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。共有四个描述其行为的特征:</p><ul><li>[[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true</li><li>[[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true</li><li>[[Writable]]：可写，表示能否修改属性值。默认true</li><li>[[Value]]：属性的数据值。读写属性值从该位置。默认undefined</li></ul><h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><p>访问器属性不包含数据值；它们包含一对getter和setter函数。共有四个描述其行为的特征:</p><ul><li>[[Configurable]]：配置，表示能否删除修改属性的特性，或者把属性修改为访问器属性。默认true</li><li>[[Enumerable]]：枚举，表示能否通过for-in循环返回属性。默认true</li><li>[[Get]]：在读取属性值时调用的函数。默认undefined</li><li>[[Set]]：在写入属性值时调用的函数。默认undefined</li></ul><p>==当个一个属性定义getter、setter或者两者都有时，这个属性就成了访问器属性==</p><p>知道属性分类之后，下面我们逐一解答开头的几个问题：</p><h1 id="Get-Put-是什么"><a href="#Get-Put-是什么" class="headerlink" title="[[Get]]/[[Put]]是什么"></a>[[Get]]/[[Put]]是什么</h1><p>首先要明确一点，[[Get]]和[[Put]]是对象默认的内置操作，可以理解为算法函数。它是在访问属性时的操作，例如通过obj.a访问a属性时就是实现了[[Get]]操作，它会先找到相同的属性名，找到才要返回属性值。<br>没有找到就会按照[[Get]]算法的设计，沿着原型链找，找不到会返回undefined。<br>[[Put]]被触发时，取决于许多因素，最重要的有对象中是否已经存在这个属性。如果已经存在，算法大致会检查下面这些内容：</p><p>1.属性是否是访问描述符？如果是并且存在setter就调用setter<br>2.属性的数据描述符中writable是否是false？如果是，在非严格模式下静默失败，在严格模式下抛出TypeError异常。<br>3.如果都不是，将该值设置为属性的值。</p><h1 id="get-set和getter-setter"><a href="#get-set和getter-setter" class="headerlink" title="get/set和getter/setter"></a>get/set和getter/setter</h1><p>[[Get]]和[[Set]]：当属性拥有这两个特性时，属性就是访问器属性。代表着在访问属性或者写入属性值时，对返回值做附加的操作。而这个<strong>操作就是getter/setter函数</strong>。<br>它们只能应用到单个属性上，无法应用在整个对象上。getter/setter是隐藏函数，是访问器属性默认拥有的隐藏函数。在读取访问器属性时调用getter，返回有效的值；在写入访问器属性时调用setter函数并传入新值。</p><p>不管是对象文字语法中的get a(){…}，还是的defineProperty(..)中的显式定义，二者都会在对象中创造一个不包含值得属性，对于这个属性的访问会自动调用一个隐藏函数，它的返回值会被当做属性访问的返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line"><span class="comment">//给a定义一个getter</span></span><br><span class="line">    get a()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._a_;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="comment">//给a定义一个setter</span></span><br><span class="line">    set a(val)&#123;</span><br><span class="line">      <span class="keyword">this</span>._a_=val *<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.a=<span class="number">2</span>;</span><br><span class="line">myObject.a;<span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>==设置getter会覆盖默认的[[Get]]操作，setter会覆盖默认得[[Put]],也被称为赋值操作==</p><blockquote><p>实际上我们赋值([[Put]])操作中的值2存储到了另一个变量_a_中。名称_a_只是一种惯例，没有任何特殊行为。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>属性是拥有自己的特性的，主要用来描述属性是否可以进行修改枚举配置的。我们访问对象的属性时就是[[Get]]操作，写入就是[[Put]]，根据算法找到<br>对应的属性。如果要对属性值进行附加操作时，就需要设置get/set特性，此时属性也就会变成访问器属性，然后调用默认的隐藏的getter/setter函数对属性<br>进行操作。然后返回属性值。</p><p>本文是陈少棠原创，收录在《齐云札记》，转载请标明原作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在js属性描述符这部分有几个较难理解的名词概念，本文旨在描述自己对它们的理解，并收录在《齐云札记》里，主要包括:[[Get]]/[[Put]]、get/set、getter/setter几个概念的阐述，数据属性和访问器属性。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="js修仙" scheme="https://chenshaotang.com/categories/js%E4%BF%AE%E4%BB%99/"/>
    
    
      <category term="js" scheme="https://chenshaotang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue之electron打包</title>
    <link href="https://chenshaotang.com/vue/vue%E4%B9%8Belectron/"/>
    <id>https://chenshaotang.com/vue/vue之electron/</id>
    <published>2018-12-29T06:06:53.000Z</published>
    <updated>2019-01-18T12:02:13.736Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了使用electron-vue对vue项目进行打包的处理办法。工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。<br><a id="more"></a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>需要管理员权限的powershell,外加翻墙,否则很多下载都不成功,关掉杀毒软件</p><ul><li>安装node,vue-cli</li><li>安装windows-build-tools</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p>在项目初始化过程中会让选择electron-builder或者electron-packager,这是electron打包的两种方式。下面我们会分别介绍两种方式异同。</p><blockquote><p>再生成的项目中\src下有main和renderer,其中main为主进程,配置菜单界面大小等,renderer为渲染进程,页面组件在这里配置</p></blockquote><p>结构图如下：<br><img src="/vue/vue之electron/jie.jpg" alt="结构图"><br>无论是选择的packager,还是builder,在生成项目之后,都要执行以下操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="electron-builder打包过程"><a href="#electron-builder打包过程" class="headerlink" title="electron-builder打包过程"></a>electron-builder打包过程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行该命令后会下载打包所需要的依赖文件,例如electron-vX.X.X-win32-x64.zip,但通常会出现下载失败,我们可以手动下载,放到指定的目录下。</p><blockquote><p>解决办法就是根据控制台显示的错误信息,到npm去搜索该文件,下载下来。通常放在C:\Users\Administrator\AppData\Local\electron\Cache</p></blockquote><p>解决了出现的问题之后继续执行npm run build,如果继续出现错误,仍然按照上述办法解决。<br>另外有两个必装的依赖:winCodeSign和nsis</p><blockquote><p><a href="https://github.com/electron-userland/electron-builder-binaries/releases" target="_blank" rel="noopener">wincodesin包地址</a><br><a href="https://github.com/electron-userland/electron-builder-binaries/releases/tag/nsis-resources-3.0.0" target="_blank" rel="noopener">nsis包地址</a></p></blockquote><p>将下载的依赖解压到C:\Users\Administrator\AppData\Local\electron\Cache</p><p>之后就可以顺利打包了</p><h2 id="electron-packer打包过程"><a href="#electron-packer打包过程" class="headerlink" title="electron-packer打包过程"></a>electron-packer打包过程</h2><p>使用packager打包只能生成可执行版,通过下面指令生成相对的客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run build:win32</span><br><span class="line">npm run build:darwin</span><br><span class="line">npm run build:linux</span><br><span class="line">npm run build:mas</span><br></pre></td></tr></table></figure><p>本文是陈少棠原创，收录在《齐云札记》，转载请标明原作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录了使用electron-vue对vue项目进行打包的处理办法。工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://chenshaotang.com/categories/vue/"/>
    
    
      <category term="electron" scheme="https://chenshaotang.com/tags/electron/"/>
    
  </entry>
  
</feed>
