<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>齐云札记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chen-st.github.io/"/>
  <updated>2019-01-07T03:09:00.455Z</updated>
  <id>https://chen-st.github.io/</id>
  
  <author>
    <name>陈少棠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录electron-vue打包</title>
    <link href="https://chen-st.github.io/uncategorized/2018/12/29/%E8%AE%B0%E5%BD%95electron-vue%E6%89%93%E5%8C%85/%E8%AE%B0%E5%BD%95electron-vue%E6%89%93%E5%8C%85/"/>
    <id>https://chen-st.github.io/uncategorized/2018/12/29/记录electron-vue打包/记录electron-vue打包/</id>
    <published>2018-12-29T06:06:53.000Z</published>
    <updated>2019-01-07T03:09:00.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="electron-vue打包成客户端"><a href="#electron-vue打包成客户端" class="headerlink" title="electron-vue打包成客户端"></a>electron-vue打包成客户端</h1><p>  工欲善其事,必先利其器,在使用electron-vue打包客户端之前,我们需要进行相关的环境配置。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>需要管理员权限的powershell,外加翻墙,否则很多下载都不成功,关掉杀毒软件</p><ul><li>安装node,vue-cli</li><li>安装windows-build-tools<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure></li></ul><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p>在项目初始化过程中会让选择electron-builder或者electron-packager,这是electron打包的两种方式。下面我们会分别介绍两种方式异同。</p><p>无论是选择的packager,还是builder,在生成项目之后,都要执行以下操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h3 id="electron-builder打包过程"><a href="#electron-builder打包过程" class="headerlink" title="electron-builder打包过程"></a>electron-builder打包过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行该命令后会下载打包所需要的依赖文件,例如electron-vX.X.X-win32-x64.zip,但通常会出现下载失败,我们可以手动下载,放到指定的目录下。</p><blockquote><p>解决办法就是根据控制台显示的错误信息,到npm去搜索该文件,下载下来。通常放在C:\Users\Administrator\AppData\Local\electron\Cache</p></blockquote><p>解决了出现的问题之后继续执行npm run build,如果继续出现错误,仍然按照上述办法解决。<br>另外有两个必装的依赖:winCodeSign和nsis</p><blockquote><p><a href="https://github.com/electron-userland/electron-builder-binaries/releases" target="_blank" rel="noopener">wincodesin包地址</a>|<br><a href="https://github.com/electron-userland/electron-builder-binaries/releases/tag/nsis-resources-3.0.0" target="_blank" rel="noopener">nsis包地址</a></p></blockquote><p>将下载的依赖解压到C:\Users\Administrator\AppData\Local\electron\Cache</p><p>之后就可以顺利打包了</p><h3 id="electron-packer打包过程"><a href="#electron-packer打包过程" class="headerlink" title="electron-packer打包过程"></a>electron-packer打包过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="捕获.png" alt="项目结构图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;electron-vue打包成客户端&quot;&gt;&lt;a href=&quot;#electron-vue打包成客户端&quot; class=&quot;headerlink&quot; title=&quot;electron-vue打包成客户端&quot;&gt;&lt;/a&gt;electron-vue打包成客户端&lt;/h1&gt;&lt;p&gt;  工欲善其
      
    
    </summary>
    
    
      <category term="electron" scheme="https://chen-st.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://chen-st.github.io/uncategorized/2018/12/27/test/"/>
    <id>https://chen-st.github.io/uncategorized/2018/12/27/test/</id>
    <published>2018-12-27T10:44:08.000Z</published>
    <updated>2018-12-27T10:44:16.046Z</updated>
    
    <content type="html"><![CDATA[<p>ceshiddlk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ceshiddlk&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
